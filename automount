#!/usr/bin/env python3 

import argparse,glob,os,re,sys
from subprocess import Popen,PIPE
from pprint import pprint

class BlockDevices(object):

  # This list contains one entry for each /dev/sd* block device.
  _devices=[]
  
  # This RE parses one line of /sbin/blkid's output.
  _blkid_parser=re.compile(
    r'(/dev/sd.*?):'
    r'(?:\s([_A-Z]+)="(.*?)")?(?:\s([_A-Z]+)="(.*?)")?(?:\s([_A-Z]+)="(.*?)")?'
    r'(?:\s([_A-Z]+)="(.*?)")?(?:\s([_A-Z]+)="(.*?)")?(?:\s([_A-Z]+)="(.*?)")?'
    r'(?:\s([_A-Z]+)="(.*?)")?(?:\s([_A-Z]+)="(.*?)")?(?:\s([_A-Z]+)="(.*?)")?'
    r'(?:\s([_A-Z]+)="(.*?)")?(?:\s([_A-Z]+)="(.*?)")?(?:\s([_A-Z]+)="(.*?)")?'
    r'(?:\s([_A-Z]+)="(.*?)")?(?:\s([_A-Z]+)="(.*?)")?(?:\s([_A-Z]+)="(.*?)")?'
  )

  def __init__(self):
    self._devices=[]
    # See if there are any /dev/sd* "things" available to be mounted.
    available=glob.glob('/dev/sd*')
    if not available:
      return

    # Run blkid on any /dev/sd* devices we've found.
    cmd=['/sbin/blkid']+available
    with Popen(['/sbin/blkid']+available,stdout=PIPE,stderr=PIPE) as blkid:
      try:
        out,err=blkid.communicate(timeout=5)
      except TimeoutExpired:
        blkid.kill()
        out,err=blkid.communicate()
      if blkid.returncode!=0:
        # Output whatever error message we might have, and return an empty list.
        raise ChildProcessError(err.decode('utf-8'))
      # Convert stdout bytes to string.
      out=out.decode('utf-8')

    # Parse blkid's output.
    for line in [l for l in out.split(os.linesep) if l]:
      m=self._blkid_parser.match(line)
      if m:
        g=[v for v in m.groups() if v!=None]
        attrs={g[i].lower():g[i+1] for i in range(1,len(g),2)}
        attrs['dev']=g[0]
        self._devices.append(attrs)

  def __contains__(self,key):
    for d in self._devices:
      if key in d:
        return True
    return False

  def __getitem__(self,index):
    return self._devices[index]

  def __iter__(self):
    self._index=0
    return self

  def __next__(self):
    if self._index>=len(self._devices):
      raise StopIteration
    item=self._devices[self._index]
    self.index+=1
    return item

  def __len__(self):
    return len(self._devices)

  def index(self,value,start=0,stop=2**31):
    for i in range(len(self._devices)):
      if 'label' in self._devices[i] and self._devices[i]['label']==value:
        return i
    raise ValueError('Device with label %r not found.'%(value,))

  def __repr__(self):
    return repr(self._devices)

  def __str__(self):
    return os.linesep.join([
      '%s: %s'%(d['dev'],' '.join([
        '%s=%s'%(k,v) for k,v in sorted(d.items()) if k!='dev'
      ]))
      for d in self._devices
    ])

class Volume(object):

  # The key values are Volume attribute names. The corresponding list of
  # volume data (from the blkid() function) express the order in which
  # each such value should be preferred.
  precedence=dict(
    id=('partuuid','uuid','dev'),
    label=('label',),
    type=('type','sec_type'),
  )

  def __init__(self,**kwargs):
    """Use our keyword arguments from a blkid() entry to set our actual
    attributes defined by Volume.precedence."""

    self.kwargs=dict(kwargs)
    for v in self.precedence:
      #print('D: looking for %r'%(v,))
      for t in self.precedence[v]:
        if t in kwargs:
          if v=='id' and t!='dev':
            setattr(self,v,'%s="%s"'%(t,kwargs[t]))
          else:
            setattr(self,v,kwargs[t])
          #print('D: found %r'%(getattr(self,v)))
          break
      else:
        raise ValueError("No suitable %r value given. Any of these would do: %s"%(v,', '.join(self.precedence[v])))
    # Figure out where to mount this volume.
    self.mountpoint='/vol/%s'%(self.label,)

  def __str__(self):
    return '%s %s %s'%(self.id,self.mountpoint,self.type)

  def __repr__(self):
    return '%s(%r)'%(self.__class__.__name__,self.kwargs)

devs=BlockDevices()
print(repr(devs))

